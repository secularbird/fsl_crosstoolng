diff -Nur cortex-strings/sysdeps/arm/eabi/arm/armv7-a/memcpy.S ../glibc/cortex-strings/sysdeps/arm/eabi/arm/armv7-a/memcpy.S
--- cortex-strings/sysdeps/arm/eabi/arm/armv7-a/memcpy.S	2016-05-28 12:45:53.000000000 +0800
+++ ../glibc/cortex-strings/sysdeps/arm/eabi/arm/armv7-a/memcpy.S	2016-05-28 15:43:36.142136000 +0800
@@ -31,15 +31,11 @@
         .text
         .fpu    neon
 
-        .global memcpy
-        .type memcpy, %function
-        .align 4
-
 /* a prefetch distance of 4 cache-lines works best experimentally */
 #define CACHE_LINE_SIZE     64
 #define PREFETCH_DISTANCE   (CACHE_LINE_SIZE*4)
 
-memcpy:
+ENTRY(memcpy)
         .fnstart
         .save       {r0, lr}
         stmfd       sp!, {r0, lr}
@@ -142,5 +138,6 @@
         ldmfd       sp!, {r0, lr}
         bx          lr
         .fnend
+END(memcpy)
 
 libc_hidden_builtin_def (memcpy) 
diff -Nur cortex-strings/sysdeps/arm/eabi/arm/armv7-a/memset.S ../glibc/cortex-strings/sysdeps/arm/eabi/arm/armv7-a/memset.S
--- cortex-strings/sysdeps/arm/eabi/arm/armv7-a/memset.S	2016-05-28 12:45:53.000000000 +0800
+++ ../glibc/cortex-strings/sysdeps/arm/eabi/arm/armv7-a/memset.S	2016-05-28 15:45:11.934136000 +0800
@@ -33,16 +33,11 @@
 @	.thumb
         .fpu    neon
 
-        .global memset
-        .type memset, %function
-        .align 4
-
 /* a prefetch distance of 4 cache-lines works best experimentally */
 #define CACHE_LINE_SIZE     64
 #define PREFETCH_DISTANCE   (CACHE_LINE_SIZE*4)
 
-	@ memset(dest, c, n)
-memset:
+ENTRY(memset)
         .fnstart
         .save       {r0}
         stmfd       sp!, {r0}
@@ -119,5 +114,6 @@
         ldmfd       sp!, {r0}
         bx          lr
         .fnend
+END(memset)
 
 libc_hidden_builtin_def (memset) 
diff -Nur cortex-strings/sysdeps/arm/eabi/arm/armv7-a/strcmp.c ../glibc/cortex-strings/sysdeps/arm/eabi/arm/armv7-a/strcmp.c
--- cortex-strings/sysdeps/arm/eabi/arm/armv7-a/strcmp.c	2016-05-28 12:45:53.000000000 +0800
+++ ../glibc/cortex-strings/sysdeps/arm/eabi/arm/armv7-a/strcmp.c	1970-01-01 08:00:00.000000000 +0800
@@ -1,449 +0,0 @@
-/*
- * Copyright (c) 2008 ARM Ltd
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in the
- *    documentation and/or other materials provided with the distribution.
- * 3. The name of the company may not be used to endorse or promote
- *    products derived from this software without specific prior written
- *    permission.
- *
- * THIS SOFTWARE IS PROVIDED BY ARM LTD ``AS IS'' AND ANY EXPRESS OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL ARM LTD BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
- * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
- * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
- * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-#include <string.h>
-#include <memcopy.h>
-
-#undef strcmp
-
-
-#ifdef __ARMEB__
-#define SHFT2LSB "lsl"
-#define SHFT2MSB "lsr"
-#define MSB "0x000000ff"
-#define LSB "0xff000000"
-#else
-#define SHFT2LSB "lsr"
-#define SHFT2MSB "lsl"
-#define MSB "0xff000000"
-#define LSB "0x000000ff"
-#endif
-
-#ifdef __thumb2__
-#define magic1(REG) "#0x01010101"
-#define magic2(REG) "#0x80808080"
-#else
-#define magic1(REG) #REG
-#define magic2(REG) #REG ", lsl #7"
-#endif
-
-int 
-__attribute__((naked)) strcmp (const char* s1, const char* s2)
-{
-  asm(
-#if !(defined(__OPTIMIZE_SIZE__) || defined (PREFER_SIZE_OVER_SPEED) || \
-      (defined (__thumb__) && !defined (__thumb2__)))
-      "pld	[r0, #0]\n\t"
-      "pld	[r1, #0]\n\t"
-      "eor	r2, r0, r1\n\t"
-      "tst	r2, #3\n\t"
-      /* Strings not at same byte offset from a word boundary.  */
-      "bne	strcmp_unaligned\n\t"
-      "ands	r2, r0, #3\n\t"
-      "bic	r0, r0, #3\n\t"
-      "bic	r1, r1, #3\n\t"
-      "ldr	ip, [r0], #4\n\t"
-      "it	eq\n\t"
-      "ldreq	r3, [r1], #4\n\t"
-      "beq	1f\n\t"
-      /* Although s1 and s2 have identical initial alignment, they are
-	 not currently word aligned.  Rather than comparing bytes,
-	 make sure that any bytes fetched from before the addressed
-	 bytes are forced to 0xff.  Then they will always compare
-	 equal.  */
-      "eor	r2, r2, #3\n\t"
-      "lsl	r2, r2, #3\n\t"
-      "mvn	r3, #"MSB"\n\t"
-      SHFT2LSB"	r2, r3, r2\n\t"
-      "ldr	r3, [r1], #4\n\t"
-      "orr	ip, ip, r2\n\t"
-      "orr	r3, r3, r2\n"
- "1:\n\t"
-#ifndef __thumb2__
-      /* Load the 'magic' constant 0x01010101.  */
-      "str	r4, [sp, #-4]!\n\t"
-      "mov	r4, #1\n\t"
-      "orr	r4, r4, r4, lsl #8\n\t"
-      "orr	r4, r4, r4, lsl #16\n"
-#endif
-      ".p2align	2\n"
- "4:\n\t"
-      "pld	[r0, #8]\n\t"
-      "pld	[r1, #8]\n\t"
-      "sub	r2, ip, "magic1(r4)"\n\t"
-      "cmp	ip, r3\n\t"
-      "itttt	eq\n\t"
-      /* check for any zero bytes in first word */
-      "biceq	r2, r2, ip\n\t"
-      "tsteq	r2, "magic2(r4)"\n\t"
-      "ldreq	ip, [r0], #4\n\t"
-      "ldreq	r3, [r1], #4\n\t"
-      "beq	4b\n"
- "2:\n\t"
-      /* There's a zero or a different byte in the word */
-      SHFT2MSB"	r0, ip, #24\n\t"
-      SHFT2LSB"	ip, ip, #8\n\t"
-      "cmp	r0, #1\n\t"
-      "it	cs\n\t"
-      "cmpcs	r0, r3, "SHFT2MSB" #24\n\t"
-      "it	eq\n\t"
-      SHFT2LSB"eq r3, r3, #8\n\t"
-      "beq	2b\n\t"
-      /* On a big-endian machine, r0 contains the desired byte in bits
-	 0-7; on a little-endian machine they are in bits 24-31.  In
-	 both cases the other bits in r0 are all zero.  For r3 the
-	 interesting byte is at the other end of the word, but the
-	 other bits are not necessarily zero.  We need a signed result
-	 representing the differnece in the unsigned bytes, so for the
-	 little-endian case we can't just shift the interesting bits
-	 up.  */
-#ifdef __ARMEB__
-      "sub	r0, r0, r3, lsr #24\n\t"
-#else
-      "and	r3, r3, #255\n\t"
-#ifdef __thumb2__
-      /* No RSB instruction in Thumb2 */
-      "lsr	r0, r0, #24\n\t"
-      "sub	r0, r0, r3\n\t"
-#else
-      "rsb	r0, r3, r0, lsr #24\n\t"
-#endif
-#endif
-#ifndef __thumb2__
-      "ldr	r4, [sp], #4\n\t"
-#endif
-      "BX LR"
-#elif (defined (__thumb__) && !defined (__thumb2__))
-  "1:\n\t"
-      "ldrb	r2, [r0]\n\t"
-      "ldrb	r3, [r1]\n\t"
-      "add	r0, r0, #1\n\t"
-      "add	r1, r1, #1\n\t"
-      "cmp	r2, #0\n\t"
-      "beq	2f\n\t"
-      "cmp	r2, r3\n\t"
-      "beq	1b\n\t"
-  "2:\n\t"
-      "sub	r0, r2, r3\n\t"
-      "bx	lr"
-#else
- "3:\n\t"
-      "ldrb	r2, [r0], #1\n\t"
-      "ldrb	r3, [r1], #1\n\t"
-      "cmp	r2, #1\n\t"
-      "it	cs\n\t"
-      "cmpcs	r2, r3\n\t"
-      "beq	3b\n\t"
-      "sub	r0, r2, r3\n\t"
-      "BX LR"
-#endif
-      );
-}
-
-#if !(defined(__OPTIMIZE_SIZE__) || defined (PREFER_SIZE_OVER_SPEED) || \
-      (defined (__thumb__) && !defined (__thumb2__)))
-static int __attribute__((naked, used)) 
-strcmp_unaligned(const char* s1, const char* s2)
-{
-#if 0
-  /* The assembly code below is based on the following alogrithm.  */
-#ifdef __ARMEB__
-#define RSHIFT <<
-#define LSHIFT >>
-#else
-#define RSHIFT >>
-#define LSHIFT <<
-#endif
-
-#define body(shift)							\
-  mask = 0xffffffffU RSHIFT shift;					\
-  w1 = *wp1++;								\
-  w2 = *wp2++;								\
-  do									\
-    {									\
-      t1 = w1 & mask;							\
-      if (__builtin_expect(t1 != w2 RSHIFT shift, 0))			\
-	{								\
-	  w2 RSHIFT= shift;						\
-	  break;							\
-	}								\
-      if (__builtin_expect(((w1 - b1) & ~w1) & (b1 << 7), 0))		\
-	{								\
-	  /* See comment in assembler below re syndrome on big-endian */\
-	  if ((((w1 - b1) & ~w1) & (b1 << 7)) & mask)			\
-	    w2 RSHIFT= shift;						\
-	  else								\
-	    {								\
-	      w2 = *wp2;						\
-	      t1 = w1 RSHIFT (32 - shift);				\
-	      w2 = (w2 LSHIFT (32 - shift)) RSHIFT (32 - shift);	\
-	    }								\
-	  break;							\
-	}								\
-      w2 = *wp2++;							\
-      t1 ^= w1;								\
-      if (__builtin_expect(t1 != w2 LSHIFT (32 - shift), 0))		\
-	{								\
-	  t1 = w1 >> (32 - shift);					\
-	  w2 = (w2 << (32 - shift)) RSHIFT (32 - shift);		\
-	  break;							\
-	}								\
-      w1 = *wp1++;							\
-    } while (1)
-
-  const unsigned* wp1;
-  const unsigned* wp2;
-  unsigned w1, w2;
-  unsigned mask;
-  unsigned shift;
-  unsigned b1 = 0x01010101;
-  char c1, c2;
-  unsigned t1;
-
-  while (((unsigned) s1) & 3)
-    {
-      c1 = *s1++;
-      c2 = *s2++;
-      if (c1 == 0 || c1 != c2)
-	return c1 - (int)c2;
-    }
-  wp1 = (unsigned*) (((unsigned)s1) & ~3);
-  wp2 = (unsigned*) (((unsigned)s2) & ~3);
-  t1 = ((unsigned) s2) & 3;
-  if (t1 == 1)
-    {
-      body(8);
-    }
-  else if (t1 == 2)
-    {
-      body(16);
-    }
-  else
-    {
-      body (24);
-    }
-  
-  do
-    {
-#ifdef __ARMEB__
-      c1 = (char) t1 >> 24;
-      c2 = (char) w2 >> 24;
-#else
-      c1 = (char) t1;
-      c2 = (char) w2;
-#endif
-      t1 RSHIFT= 8;
-      w2 RSHIFT= 8;
-    } while (c1 != 0 && c1 == c2);
-  return c1 - c2;
-#endif
-
-  asm("wp1 .req r0\n\t"
-      "wp2 .req r1\n\t"
-      "b1  .req r2\n\t"
-      "w1  .req r4\n\t"
-      "w2  .req r5\n\t"
-      "t1  .req ip\n\t"
-      "@ r3 is scratch\n"
-
-      /* First of all, compare bytes until wp1(sp1) is word-aligned. */
- "1:\n\t"
-      "tst	wp1, #3\n\t"
-      "beq	2f\n\t"
-      "ldrb	r2, [wp1], #1\n\t"
-      "ldrb	r3, [wp2], #1\n\t"
-      "cmp	r2, #1\n\t"
-      "it	cs\n\t"
-      "cmpcs	r2, r3\n\t"
-      "beq	1b\n\t"
-      "sub	r0, r2, r3\n\t"
-      "BX LR\n"
-
- "2:\n\t"
-      "str	r5, [sp, #-4]!\n\t"
-      "str	r4, [sp, #-4]!\n\t"
-      //      "stmfd	sp!, {r4, r5}\n\t"
-      "mov	b1, #1\n\t"
-      "orr	b1, b1, b1, lsl #8\n\t"
-      "orr	b1, b1, b1, lsl #16\n\t"
-
-      "and	t1, wp2, #3\n\t"
-      "bic	wp2, wp2, #3\n\t"
-      "ldr	w1, [wp1], #4\n\t"
-      "ldr	w2, [wp2], #4\n\t"
-      "cmp	t1, #2\n\t"
-      "beq	2f\n\t"
-      "bhi	3f\n"
-
-      /* Critical inner Loop: Block with 3 bytes initial overlap */
-      ".p2align	2\n"
- "1:\n\t"
-      "bic	t1, w1, #"MSB"\n\t"
-      "cmp	t1, w2, "SHFT2LSB" #8\n\t"
-      "sub	r3, w1, b1\n\t"
-      "bic	r3, r3, w1\n\t"
-      "bne	4f\n\t"
-      "ands	r3, r3, b1, lsl #7\n\t"
-      "it	eq\n\t"
-      "ldreq	w2, [wp2], #4\n\t"
-      "bne	5f\n\t"
-      "eor	t1, t1, w1\n\t"
-      "cmp	t1, w2, "SHFT2MSB" #24\n\t"
-      "bne	6f\n\t"
-      "ldr	w1, [wp1], #4\n\t"
-      "b	1b\n"
- "4:\n\t"
-      SHFT2LSB"	w2, w2, #8\n\t"
-      "b	8f\n"
-
- "5:\n\t"
-#ifdef __ARMEB__
-      /* The syndrome value may contain false ones if the string ends
-	 with the bytes 0x01 0x00 */
-      "tst	w1, #0xff000000\n\t"
-      "itt	ne\n\t"
-      "tstne	w1, #0x00ff0000\n\t"
-      "tstne	w1, #0x0000ff00\n\t"
-      "beq	7f\n\t"
-#else
-      "bics	r3, r3, #0xff000000\n\t"
-      "bne	7f\n\t"
-#endif
-      "ldrb	w2, [wp2]\n\t"
-      SHFT2LSB"	t1, w1, #24\n\t"
-#ifdef __ARMEB__
-      "lsl	w2, w2, #24\n\t"
-#endif
-      "b	8f\n"
-
- "6:\n\t"
-      SHFT2LSB"	t1, w1, #24\n\t"
-      "and	w2, w2, #"LSB"\n\t"
-      "b	8f\n"
-
-      /* Critical inner Loop: Block with 2 bytes initial overlap */
-      ".p2align	2\n"
- "2:\n\t"
-      SHFT2MSB"	t1, w1, #16\n\t"
-      "sub	r3, w1, b1\n\t"
-      SHFT2LSB"	t1, t1, #16\n\t"
-      "bic	r3, r3, w1\n\t"
-      "cmp	t1, w2, "SHFT2LSB" #16\n\t"
-      "bne	4f\n\t"
-      "ands	r3, r3, b1, lsl #7\n\t"
-      "it	eq\n\t"
-      "ldreq	w2, [wp2], #4\n\t"
-      "bne	5f\n\t"
-      "eor	t1, t1, w1\n\t"
-      "cmp	t1, w2, "SHFT2MSB" #16\n\t"
-      "bne	6f\n\t"
-      "ldr	w1, [wp1], #4\n\t"
-      "b	2b\n"
-
- "5:\n\t"
-#ifdef __ARMEB__
-      /* The syndrome value may contain false ones if the string ends
-	 with the bytes 0x01 0x00 */
-      "tst	w1, #0xff000000\n\t"
-      "it	ne\n\t"
-      "tstne	w1, #0x00ff0000\n\t"
-      "beq	7f\n\t"
-#else
-      "lsls	r3, r3, #16\n\t"
-      "bne	7f\n\t"
-#endif
-      "ldrh	w2, [wp2]\n\t"
-      SHFT2LSB"	t1, w1, #16\n\t"
-#ifdef __ARMEB__
-      "lsl	w2, w2, #16\n\t"
-#endif
-      "b	8f\n"
-
- "6:\n\t"
-      SHFT2MSB"	w2, w2, #16\n\t"
-      SHFT2LSB"	t1, w1, #16\n\t"
- "4:\n\t"
-      SHFT2LSB"	w2, w2, #16\n\t"
-      "b	8f\n\t"
-
-      /* Critical inner Loop: Block with 1 byte initial overlap */
-      ".p2align	2\n"
- "3:\n\t"
-      "and	t1, w1, #"LSB"\n\t"
-      "cmp	t1, w2, "SHFT2LSB" #24\n\t"
-      "sub	r3, w1, b1\n\t"
-      "bic	r3, r3, w1\n\t"
-      "bne	4f\n\t"
-      "ands	r3, r3, b1, lsl #7\n\t"
-      "it	eq\n\t"
-      "ldreq	w2, [wp2], #4\n\t"
-      "bne	5f\n\t"
-      "eor	t1, t1, w1\n\t"
-      "cmp	t1, w2, "SHFT2MSB" #8\n\t"
-      "bne	6f\n\t"
-      "ldr	w1, [wp1], #4\n\t"
-      "b	3b\n"
- "4:\n\t"
-      SHFT2LSB"	w2, w2, #24\n\t"
-      "b	8f\n"
- "5:\n\t"
-      /* The syndrome value may contain false ones if the string ends
-	 with the bytes 0x01 0x00 */
-      "tst	w1, #"LSB"\n\t"
-      "beq	7f\n\t"
-      "ldr	w2, [wp2], #4\n"
- "6:\n\t"
-      SHFT2LSB"	t1, w1, #8\n\t"
-      "bic	w2, w2, #"MSB"\n\t"
-      "b	8f\n"
- "7:\n\t"
-      "mov	r0, #0\n\t"
-      //      "ldmfd	sp!, {r4, r5}\n\t"
-      "ldr	r4, [sp], #4\n\t"
-      "ldr	r5, [sp], #4\n\t"
-      "BX LR\n"
- "8:\n\t"
-      "and	r2, t1, #"LSB"\n\t"
-      "and	r0, w2, #"LSB"\n\t"
-      "cmp	r0, #1\n\t"
-      "it	cs\n\t"
-      "cmpcs	r0, r2\n\t"
-      "itt	eq\n\t"
-      SHFT2LSB"eq	t1, t1, #8\n\t"
-      SHFT2LSB"eq	w2, w2, #8\n\t"
-      "beq	8b\n\t"
-      "sub	r0, r2, r0\n\t"
-      //      "ldmfd	sp!, {r4, r5}\n\t"
-      "ldr	r4, [sp], #4\n\t"
-      "ldr	r5, [sp], #4\n\t"
-      "BX LR");
-}
-
-#endif
-
-libc_hidden_builtin_def (strcmp) 
diff -Nur cortex-strings/sysdeps/arm/eabi/arm/armv7-a/strcpy.c ../glibc/cortex-strings/sysdeps/arm/eabi/arm/armv7-a/strcpy.c
--- cortex-strings/sysdeps/arm/eabi/arm/armv7-a/strcpy.c	2016-05-28 12:45:53.000000000 +0800
+++ ../glibc/cortex-strings/sysdeps/arm/eabi/arm/armv7-a/strcpy.c	1970-01-01 08:00:00.000000000 +0800
@@ -1,172 +0,0 @@
-/*
- * Copyright (c) 2008 ARM Ltd
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in the
- *    documentation and/or other materials provided with the distribution.
- * 3. The name of the company may not be used to endorse or promote
- *    products derived from this software without specific prior written
- *    permission.
- *
- * THIS SOFTWARE IS PROVIDED BY ARM LTD ``AS IS'' AND ANY EXPRESS OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL ARM LTD BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
- * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
- * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
- * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-#include <string.h>
-#include <memcopy.h>
-
-#undef strcmp
-
-
-#ifdef __thumb2__
-#define magic1(REG) "#0x01010101"
-#define magic2(REG) "#0x80808080"
-#else
-#define magic1(REG) #REG
-#define magic2(REG) #REG ", lsl #7"
-#endif
-
-char* __attribute__((naked))
-strcpy (char* dst, const char* src)
-{
-  asm (
-#if !(defined(__OPTIMIZE_SIZE__) || defined (PREFER_SIZE_OVER_SPEED) || \
-      (defined (__thumb__) && !defined (__thumb2__)))
-       "pld	[r1, #0]\n\t"
-       "eor	r2, r0, r1\n\t"
-       "mov	ip, r0\n\t"
-       "tst	r2, #3\n\t"
-       "bne	4f\n\t"
-       "tst	r1, #3\n\t"
-       "bne	3f\n"
-  "5:\n\t"
-#ifndef __thumb2__
-       "str	r5, [sp, #-4]!\n\t"
-       "mov	r5, #0x01\n\t"
-       "orr	r5, r5, r5, lsl #8\n\t"
-       "orr	r5, r5, r5, lsl #16\n\t"
-#endif
-
-       "str	r4, [sp, #-4]!\n\t"
-       "tst	r1, #4\n\t"
-       "ldr	r3, [r1], #4\n\t"
-       "beq	2f\n\t"
-       "sub	r2, r3, "magic1(r5)"\n\t"
-       "bics	r2, r2, r3\n\t"
-       "tst	r2, "magic2(r5)"\n\t"
-       "itt	eq\n\t"
-       "streq	r3, [ip], #4\n\t"
-       "ldreq	r3, [r1], #4\n"
-       "bne	1f\n\t"
-       /* Inner loop.  We now know that r1 is 64-bit aligned, so we
-	  can safely fetch up to two words.  This allows us to avoid
-	  load stalls.  */
-       ".p2align 2\n"
-  "2:\n\t"
-       "pld	[r1, #8]\n\t"
-       "ldr	r4, [r1], #4\n\t"
-       "sub	r2, r3, "magic1(r5)"\n\t"
-       "bics	r2, r2, r3\n\t"
-       "tst	r2, "magic2(r5)"\n\t"
-       "sub	r2, r4, "magic1(r5)"\n\t"
-       "bne	1f\n\t"
-       "str	r3, [ip], #4\n\t"
-       "bics	r2, r2, r4\n\t"
-       "tst	r2, "magic2(r5)"\n\t"
-       "itt	eq\n\t"
-       "ldreq	r3, [r1], #4\n\t"
-       "streq	r4, [ip], #4\n\t"
-       "beq	2b\n\t"
-       "mov	r3, r4\n"
-  "1:\n\t"
-#ifdef __ARMEB__
-       "rors	r3, r3, #24\n\t"
-#endif
-       "strb	r3, [ip], #1\n\t"
-       "tst	r3, #0xff\n\t"
-#ifdef __ARMEL__
-       "ror	r3, r3, #8\n\t"
-#endif
-       "bne	1b\n\t"
-       "ldr	r4, [sp], #4\n\t"
-#ifndef __thumb2__
-       "ldr	r5, [sp], #4\n\t"
-#endif
-       "BX LR\n"
-
-       /* Strings have the same offset from word alignment, but it's
-	  not zero.  */
-  "3:\n\t"
-       "tst	r1, #1\n\t"
-       "beq	1f\n\t"
-       "ldrb	r2, [r1], #1\n\t"
-       "strb	r2, [ip], #1\n\t"
-       "cmp	r2, #0\n\t"
-       "it	eq\n"
-       "BXEQ LR\n"
-  "1:\n\t"
-       "tst	r1, #2\n\t"
-       "beq	5b\n\t"
-       "ldrh	r2, [r1], #2\n\t"
-#ifdef __ARMEB__
-       "tst	r2, #0xff00\n\t"
-       "iteet	ne\n\t"
-       "strneh	r2, [ip], #2\n\t"
-       "lsreq	r2, r2, #8\n\t"
-       "streqb	r2, [ip]\n\t"
-       "tstne	r2, #0xff\n\t"
-#else
-       "tst	r2, #0xff\n\t"
-       "itet	ne\n\t"
-       "strneh	r2, [ip], #2\n\t"
-       "streqb	r2, [ip]\n\t"
-       "tstne	r2, #0xff00\n\t"
-#endif
-       "bne	5b\n\t"
-       "BX LR\n"
-
-       /* src and dst do not have a common word-alignement.  Fall back to
-	  byte copying.  */
-  "4:\n\t"
-       "ldrb	r2, [r1], #1\n\t"
-       "strb	r2, [ip], #1\n\t"
-       "cmp	r2, #0\n\t"
-       "bne	4b\n\t"
-       "BX LR"
-
-#elif !defined (__thumb__) || defined (__thumb2__)
-       "mov	r3, r0\n\t"
-  "1:\n\t"
-       "ldrb	r2, [r1], #1\n\t"
-       "strb	r2, [r3], #1\n\t"
-       "cmp	r2, #0\n\t"
-       "bne	1b\n\t"
-       "BX LR"
-#else
-       "mov	r3, r0\n\t"
-  "1:\n\t"
-       "ldrb	r2, [r1]\n\t"
-       "add	r1, r1, #1\n\t"
-       "strb	r2, [r3]\n\t"
-       "add	r3, r3, #1\n\t"
-       "cmp	r2, #0\n\t"
-       "bne	1b\n\t"
-       "BX LR"
-#endif
-       );
-}
-libc_hidden_builtin_def (strcpy) 
diff -Nur cortex-strings/sysdeps/arm/eabi/arm/armv7-a/strlen.c ../glibc/cortex-strings/sysdeps/arm/eabi/arm/armv7-a/strlen.c
--- cortex-strings/sysdeps/arm/eabi/arm/armv7-a/strlen.c	2016-05-28 12:45:53.000000000 +0800
+++ ../glibc/cortex-strings/sysdeps/arm/eabi/arm/armv7-a/strlen.c	1970-01-01 08:00:00.000000000 +0800
@@ -1,185 +0,0 @@
-/*
- * Copyright (c) 2008 ARM Ltd
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in the
- *    documentation and/or other materials provided with the distribution.
- * 3. The name of the company may not be used to endorse or promote
- *    products derived from this software without specific prior written
- *    permission.
- *
- * THIS SOFTWARE IS PROVIDED BY ARM LTD ``AS IS'' AND ANY EXPRESS OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL ARM LTD BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
- * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
- * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
- * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-#include <limits.h>
-#include <stddef.h>
-
-#include <string.h>
-#include <memcopy.h>
-
-#undef strcmp
-
-
-#if defined (__OPTIMIZE_SIZE__) || defined (PREFER_SIZE_OVER_SPEED) || \
-  (defined (__thumb__) && !defined (__thumb2__))
-
-size_t
-strlen (const char* str)
-{
-  int scratch;
-#if defined (__thumb__) && !defined (__thumb2__)
-  size_t len;
-  asm ("mov	%0, #0\n"
-       "1:\n\t"
-       "ldrb	%1, [%2, %0]\n\t"
-       "add 	%0, %0, #1\n\t"
-       "cmp	%1, #0\n\t"
-       "bne	1b"
-       : "=&r" (len), "=&r" (scratch) : "r" (str) : "memory", "cc");
-  return len - 1;
-#else
-  const char* end;
-  asm ("1:\n\t"
-       "ldrb	%1, [%0], #1\n\t"
-       "cmp	%1, #0\n\t"
-       "bne	1b"
-       : "=&r" (end), "=&r" (scratch) : "0" (str) : "memory", "cc");
-  return end - str - 1;
-#endif
-}
-#else
-
-size_t __attribute__((naked))
-strlen (const char* str)
-{
-  asm ("len .req r0\n\t"
-       "data .req r3\n\t"
-       "addr .req r1\n\t"
-
-       "pld [r0, #0]\n\t"
-       /* Word-align address */
-       "bic	addr, r0, #3\n\t"
-       /* Get adjustment for start ... */
-       "ands	len, r0, #3\n\t"
-       "neg	len, len\n\t"
-       /* First word of data */
-       "ldr	data, [addr], #4\n\t"
-       /* Ensure bytes preceeding start ... */
-       "add	ip, len, #4\n\t"
-       "mov	ip, ip, asl #3\n\t"
-       "mvn	r2, #0\n\t"
-       /* ... are masked out */
-#ifdef __thumb__
-       "itt	ne\n\t"
-# ifdef __ARMEB__
-       "lslne	r2, ip\n\t"
-# else
-       "lsrne	r2, ip\n\t"
-# endif
-       "orrne	data, data, r2\n\t"
-#else
-       "it	ne\n\t"
-# ifdef __ARMEB__
-       "orrne	data, data, r2, lsl ip\n\t"
-# else
-       "orrne	data, data, r2, lsr ip\n\t"
-# endif
-#endif
-       /* Magic const 0x01010101 */
-#ifdef _ISA_ARM_7
-       "movw	ip, #0x101\n\t"
-#else
-       "mov	ip, #0x1\n\t"
-       "orr	ip, ip, ip, lsl #8\n\t"
-#endif
-       "orr	ip, ip, ip, lsl #16\n"
-
-	/* This is the main loop.  We subtract one from each byte in
-	   the word: the sign bit changes iff the byte was zero or
-	   0x80 -- we eliminate the latter case by anding the result
-	   with the 1-s complement of the data.  */
-       "1:\n\t"
-       /* test (data - 0x01010101)  */
-       "sub	r2, data, ip\n\t"
-       /* ... & ~data */
-       "bic	r2, r2, data\n\t"
-       /* ... & 0x80808080 == 0? */
-       "ands	r2, r2, ip, lsl #7\n\t"
-#ifdef _ISA_ARM_7
-       /* yes, get more data... */
-       "itt	eq\n\t"
-       "ldreq	data, [addr], #4\n\t"
-       /* and 4 more bytes  */
-       "addeq	len, len, #4\n\t"
-	/* If we have PLD, then unroll the loop a bit.  */
-       "pld [addr, #8]\n\t"
-       /*  test (data - 0x01010101)  */
-       "ittt	eq\n\t"
-       "subeq	r2, data, ip\n\t"
-       /* ... & ~data */
-       "biceq	r2, r2, data\n\t"
-       /* ... & 0x80808080 == 0? */
-       "andeqs	r2, r2, ip, lsl #7\n\t"
-#endif
-       "itt	eq\n\t"
-       /* yes, get more data... */
-       "ldreq	data, [addr], #4\n\t"
-       /* and 4 more bytes  */
-       "addeq	len, len, #4\n\t"
-       "beq	1b\n\t"
-#ifdef __ARMEB__
-       "tst	data, #0xff000000\n\t"
-       "itttt	ne\n\t"
-       "addne	len, len, #1\n\t"
-       "tstne	data, #0xff0000\n\t"
-       "addne	len, len, #1\n\t"
-       "tstne	data, #0xff00\n\t"
-       "it	ne\n\t"
-       "addne	len, len, #1\n\t"
-#else
-# ifdef _ISA_ARM_5
-	/* R2 is the residual sign bits from the above test.  All we
-	need to do now is establish the position of the first zero
-	byte... */
-	/* Little-endian is harder, we need the number of trailing
-	zeros / 8 */
-#  ifdef _ISA_ARM_7
-       "rbit	r2, r2\n\t"
-       "clz	r2, r2\n\t"
-#  else
-       "rsb	r1, r2, #0\n\t"
-       "and	r2, r2, r1\n\t"
-       "clz	r2, r2\n\t"
-       "rsb	r2, r2, #31\n\t"
-#  endif
-       "add	len, len, r2, lsr #3\n\t"
-# else  /* No CLZ instruction */
-       "tst	data, #0xff\n\t"
-       "itttt	ne\n\t"
-       "addne	len, len, #1\n\t"
-       "tstne	data, #0xff00\n\t"
-       "addne	len, len, #1\n\t"
-       "tstne	data, #0xff0000\n\t"
-       "it	ne\n\t"
-       "addne	len, len, #1\n\t"
-# endif
-#endif
-       "BX LR");
-}
-#endif
-libc_hidden_builtin_def (strlen) 
